N ESpectre: The Massively Multi-Haunted NES
By
Zachary Johnson, Andrew Reitano

      >> Okay.  Hi, can everyone hear me?  Hello, you beautiful people.  Thank you for joining us here on the Sidetrack for the first day of JSConf.  Yes, one whoo from somebody.  Very excited.  More.  Thank you.  We have someone who has flown in from Minnesota which I believe is in the United States of America.  I don't really know about these things.  Got something very, very excited lined up.  I think it was a tag team, but we have lost 50% due to a throat illness.  So please be very, very kind to the remaining car for the gang, Zachary Johnson.
      [ Applause ]
      >> Hi.  Thanks, everybody.  I'm really, really excited to be speaking to this audience.  Thanks so much to the committee and the volunteers for inviting us and for putting on this event.  So I'm Zach Johnson, or Zachary Johnson.  Andrew Reitano who is supposed to be here, he is back at our flat, sick.  He got in and like got a  lost his voice and got a horrible cough and a fever.  He's totally knocked out.  I told him, you know, I got this.  Sleep until 7:30. We have another thing at 7:30 tonight on the other stage with more interactive demos.  This is more the "How" talk, and more play tonight at 7:30.  I'm hoping he can sleep and join us.
      I was going to tell you he got eaten by a shark or something.  That's more exciting.  Andy is an electrical engineer by trade so, you know, he worked on like summary navigation systems and electrical engineering stuff.  And he got into chip tunes and the electronic music scenes and started doing visualizations with Nintendo and Sega.  To tell you about him.  And because he's not here, Andy wanted to be a game genie when he grew up.  This project gets him close.
      Me, Zach Johnson, common name.  Except the Zach part.  Zachstronaut.com, you can find it there.  That pixel art astronaut is my character.  Some of the things I worked on, if you're familiar with adventure time on Cartoon Network.  Did programming for the Beemo app.  That entire app, number one in the app store four or five years ago, the whole app was done in Foam Gap.  It was HTML and JavaScript.  It was number one and did really well for Cartoon Network.  A couple other things I have done.
      In the United States, there was legislation, SOPA, a big Internet blackout.  I did a template for that with animated spotlight effect and many Websites used.  And I'm a game developer.  And there's a game, Juggernauts, I have been working on it.  I have been into games and interactive stuff.
      Tell you about NESpectre.  I have 25 minutes to do this.  Find me in the community area if you want to talk shop, get into the nitty gritty.  And if you want to play demos, we have a bunch of things you can do with the tool.  Tonight at 7:30 on the main stage during dinner.
      This is going to go audience interactive.  So you can see that in the back.  Get out your smartphones, and if you have data, if you have LTE, have a better time with that, actually, than WiFi, I think.  So pull up your smartphone.  You're going to be able to control an NES from your smartphone.  Go to NESectre.com, should forward you to the address you want to be at.  Crank up the volume on your phone.  Leave this up for just a moment.  Anybody gotten that to work?  One thumbs up could be awesome.
      We're going to do a live demo of what this thing is.  Open a couple browser windows.  This is  actually  tonight, hopefully, if Andy is well, we're going to have a physical Nintendo.  This is machine Mscript and compiled emulator, running JavaScript.  And pull it out, and I will have to play.  Whoo.  That's good and loud.  Okay.
      Go over here.  And then be real nice to me.  Okay.  Okay.  Looking behind the curtain here.  Okay, Mario mode.  All right.  That's a good sound.  Okay.  So on your smartphones, you should start to see  there you go.  People already  there you go.
      So I'll just play this completely normal game of Mario.
      [ Laughter ]
      This is an unmodified ROM.  This is the original game.  I'll explain what's going on.  Oh, my.  Okay.  It's completely the original ROM.  This is devolving quickly.  People keep doing the get ripped and it's totally making me freeze.  We like to do this with inviting somebody up to play a normal game of Mario.  But I don't have a Game Pad, so I'm doing the keyboard here.  I don't know.  You guys haven't managed to kill me yet.  Whoa.  What was that?
      I'm a little scared by the flying Bowser.  Hey.  I survived!
      [ Applause ]
      Okay.  Let's pause all of this to not completely kill my server.  We have wrong domain.  Okay.  Pause.  Cool.  Okay.  Thank you very much.  So there's going to be a bunch more different games and different play modes tonight.  So let's get in a little bit into how all of this happens.  Okay.
      There's an event in Austin, Texas, it's an interactive art and video game festival, Fantastic Arcade.  I went to the event two years ago and never met Andy before.  He was showing a brand-new NES game on a physical, plastic cart.  A new game, it's called super Russian roulette.  You play with a zapper against a cowboy.  And this game, despite being a real 8bit NES game has full screen animations and a beautiful country western sound track and pushes the limits of what's possible.  I was amazed.
      So I talked to him, never talked to him before, and we hit it off about the NES.  I wrote a WebGL shader in JavaScript and GSL that emulates like the dying sprite system.  If you remember playing NES you would have to blow on the card and the graphics get scrambled.  This is emulating that.  We hit it off.  And I told him about the massively multiplayer name stuff I was doing.  I did Apestronauts.  And Starwhal, a narwhal joust.  You use the tusk to joust.  He was like, wait a minute, take your massively multiplayer stuff and my NES stuff and mash them together.
      This is the first day I met him at the festival.  And I said, absolutely let's do that.  So I went back to my flat at the conference and started coding this thing.  And the next morning I came to Andy's booth, where he's starting this game.  And this is the original version of the UI.  And I said, hey, you know, let's  I coded it last night.  Let's try it.  And, you know, this is like  so this is Andy, you guys.  This is another photo of him.  And despite, like, both of us playing video games and partying the entire festival, we managed to put this thing together.
      And this is like, now, like less than 48 hours from the idea we see this happen in contra.  If you remember contra.  That's the level one boss.  And we jumped up and over the end boss in contra into uncharted territory in the game.  This was the moment where I was like, this is a thing.  This is special.
      And so this is, then, that same day, Andy had a talk.  Invited me on to the talk to show the thing we just collaborated on.  He's like, coding.  Like before he speaks like on stage like last minute stuff and I'm right next to him on the far left there.  There's me in a Duck Hunt Tshirt.  So  yeah.  That was how it came to be.  Which is really cool.  It's like the magic of festivals like in.  You meet someone and you want to collaborate.
      So a little bit about the NES, and this is the part that Andy would tell you about.  He's the hardware guy.  I'll do my best without him.  The crazy thing  one very crazy thing about the NES is the entire RAM of the NES was 2 kilobytes.  Like 2048 bytes, that's like 15 Tweets.  Entire  all of program RAM.  So what Andy did  when we do this off the physical hardware, what Andy did was he used what's called dual port RAM.  Which is RAM that two different CPUs can read and write at the same time.
      So he actually desoldered the RAM off of the NES mother board and put on his own custom daughter board to talk to the dual port RAM over serial.  He modded the boss to have a serial plug that looks like a headphone jack and goes into the back of the NES me.  Otherwise you can't tell it's an NES.  This is the game genie.  It's important to distinguish this.
      So the game genie modified ROM.  It sat between the cart and the NES and changed the values that are being read off the readonly memory on the plastic card.  But our modification is directly into the RAM, the working memory of the Nintendo, which lets you do things you could never do with a game genie.  Here are some examples what have you can do with this.
      So Andy made a giant hockey buzzer for Blades of Steel and a scoreboard.  And it's reading RAM off of the console.  And, you know, you get a goal and it fires off this thing.
      He did a mod for Contra with a strobe.  Every time you fire the gun, you get a strobe.  And then this is something that I can show you more of later.  But like you could Hex at it and do crazy things.  There he's Hex editing the whip in Castlevania and whipping different sprites that are no longer the whip.
      So what's going on in the stack?  There's the physical NES console.  In this case, you saw an emulator.  And there's a script that talks serial to the NES.  There was a node server that all of you connected with realtime communication with Socket.IO.  And definitely there's some actual ghosts in the mix here.
      The backend is actually really simple.  We first made this two years ago and I wanted to show my package.JSON.  It's silly how little is in here and how old some of the versions  which I thought, you know, in the age of tons and tons of libraries and stuff like that, I kind of appreciate the old school.
      And so back to the diagram a little bit.  So I'm just using express to basically serve up the client to you.  The  all of the UI is in that first HTML push.  And then it's JavaScript after that all speaks Socket.IO to the server.  You have a peek at our backend admin gateway to switch the game modes.
      And the Socket.IO server that sits between you and the NES, is basically maintaining the state of whatever, like, meta game you are all playing.  And it's mapping your button presses to physical RAM addresses in that 2048 bytes of memory and creating a  basically a delta change file that's saying the audience has changed these bytes to these values and that's what gets sent off to a script to write those values to serial to the NES.
      Frontend is also, you know, pretty standard stuff.  I'm not even using like a  I mean, the UI's not supercomplicated.  It's just like jQuery replacing stuff.  It's not even React or anything like that.  Socket.IO for the realtime communication.  And I grabbed fast click for backwards compatibility with devices.  So there's not a 300-millisecond lag when you're pushing buttons you might know from mobile.
      You didn't see this, but you'll see it tonight.  When you're playing a game, when you're playing Mario, in realtime I can instantly change to another game.  You don't have to reload or anything.  It just switches.  All of a sudden, all your phones are in Tetris mote, all of your phones are in Contra mode.  The client is waiting for the server to say, hey, we're now playing Tetris.  And all of your UIs flip over.
      And there's a simple JavaScript controller for each different game that then takes over listening for UI events and sending data over the Socket.IO stream.  This is kind of like random, but, you know, in case, you know, any of you weren't familiar with this, there's like the long-time restriction of only being able to play audio on the web if you  in a click event.  Like you have to  you have to, like, touch something and then you can load and play an audio file.
      And we wanted it so that we had that creepy, like almost bells were ringing when it activated.  And that wasn't on click.  So this is like a hack where you basically, the first time someone touches the screen, you set the volume really low and put an on-time update listener.  And as soon as it starts playing, you pause it.  And you can use it every time later procedurally.  You don't have to use it later.  I'm assuming lots of you can't read the code in the back.
      The client socket code is way less than 64 lines to do all of that back and forth.  It's really pretty simple.  JavaScript is kind of amazing for prototyping and for rapidly doing stuff as I'm sure a lot of you know.  To be able to build something like this in a day really speaks, I think, to the power of JavaScript.
      So the emulator that you saw, to tell you a little bit more about that, there's a C++ emulator, FCE wax, a great NES emulator.  And N script N, compiles to JS.  And my finish is not great.  But valtteri hekula.  There's a URL, bucket.org/ts1.  They were the ones to do the M script in compile of SE UX and did amazing work optimizing the WebGL and web audio APIs being used.  Not only does it run at 50 frames a second, but has far and away the best audio and music reproduction of any of the JavaScript NES emulators.  There are a few.
      It's great you can transpile C++ to JavaScript and get such an awesome result.  What I did was took the code, grabbed the original C++ code and put in new hooks to access the ram and expose those to JavaScript and then recompiled.  And then that lets me use an emulator like you saw today.  And that was really important, because I'm from Minneapolis, and Andy is out in Brooklyn, in New York City.
      And so, we're in two completely different parts of the United States.  And basically, we need to be able to do research with each other.  Like find these RAM values that are interesting.  What's the RAM value that makes Mario swim?  What's the RAM value that makes Mario shrink or change the colors?  We did peer to peer Hex editing of the 2048 bytes of RAM.
      And I can actually show that.  Let's see.  So let's go to another demo.  Let's maybe do  let's do, why not Contra, I guess?  So now I can find my Hex editor.  Oh, yeah.  So this is a live Hex editor of the ram.  This is one page of RAM.  So 256 bytes.  And I can kind of page through memory and see everything that's going on.
      And this lets you essentially do like both archaeology on what's going on in these games, and also find out where you can do these hacks.  And some of the stuff is really interesting.  Like here  like this looks like something, right?  And it turns out like this matches some values with the color cycling that's going on.  And you can also tend to find music in the engine too.  You can see where like the music is playing.  This one doesn't have a lot of music.
      So I can actually go through here.  And Andy in New York can do this too.  We have two little cursors and we can start playing with values.  So I can do that.  I can just start changing RAM value here is.  And it's amazing how resilient these old games were.  See?  Like I'm corrupting a bunch of RAM and bytes, and it's actually not crashing it.
      So let me go into play mode here.  Okay.  And the first 256 bytes of RAM are by far the most kind of interesting.  They have there.  See?  Yeah, that killed me right away.
      [ Laughter ]
      But it's mostly this kind of first page that really is  whoa.  It's still toast.  Okay.  That's normal.  That sounds normal.  Let's see if I can find something else fun real quick?  Okay.  This has to reload too.  Okay.  So let's see what this byte does.  Or maybe this one. oh!  See that?
      [ Laughter ]
      Yeah?  So I know there's a bug in here somewhere that you will instantly win the game.  And I want to see if I can just happen upon that one.  That would be great.  Let's see.  Yes!
      [ Laughter ]
      Oh, this is  that won a level, not the game.  There's another one where literally like the helicopter comes in and the credits roll wherever you are.  It's great.
      [ Laughter ]
      So  yeah.  So the way  I could go back to the talk  yeah, yeah, yeah.  Sorry, everybody.  Okay.  So the way that that works is I use peer JS.  Which is a really slick and easy to use web RTC wrapper.  It's different than what Socket.IO and web sockets had been.  It's peer to peer, allowing Andy and my computer to connect.  It's nice when you're 60 frames a second sharing 256 bytes.  Peer to peer and binary.  And I think web sockets support binary, it was always strings.  So there's the tremendous overhead of having to send two characters for a single value or more.
      So the binary data over the pipe and peer to peer, which is really slick.  I was really happy with that.  It was pretty easy to put together this Hex editor.  So this is an example of like archaeology in an NES game.  This is Dragon Warrior 2.  An RPG for NES.  And I decided to enumerate every possible value for inventory.  I originally did this in the English language version of the game and went just 1 to 255.  What's everything you can have in inventory?  The swords and armor and potions.  And I found this thing that showed up as perilous.  Which is an English word that means "Danger."  And you could equip it and use it and nothing would happen.
      It doesn't appear in the game, I'm Googling, I don't find anything.  And hop over to the Japanese version of Dragon Warrior 2.  I enumerate the values.  I have to compare them one to one with English.  What if they're ordered different in English.  I don't know any Japanese.  And from the bit maps, trying to figure out the characters and then use the unicode and paste into Google translate.  Sure enough.  This is an herb, this is the great sword, this is so and so's armor.  And everything is lining up.  And turns out that Perilous in the Japanese version is music box of death.
      [ Laughter ]
      And I originally  because I don't speak any Japanese, I originally translated it as music box of teeth.  And wasn't until the first time presenting to a crowd like that this someone who knows Japanese was like, that doesn't say that.  And so then I did some more searching.  Like music box of death.  That didn't turn anything up.  Then I copied and pasted the unicode Japanese characters, did a search for that.  And I found one single forum post  like old forum post  that was like a Dragon Quest Con or something.  Somebody had asked about this to one of the creators and they said that it was a debugging item that they used to kill the entire party at will.  They needed to test death and they just disabled it for the production release.
      And in kind of thing is actually really common.  Like Andy found a twoplayer mode in the shipped Tetris.  The retail version of Tetris  one of the two  for the NES  has a hidden twoplayer mode that's half baked.  They turned it off.  You can play it.  You can find the byte in memory and flick it and now you're playing twoplayer Tetris.  There's stuff like this in these old games and it's really fascinating.
      Okay.  Let's see.  Well, actually  so rather than do questions, do we want to do another demo?  Yeah?  Okay.  And I have like five minutes, right?  Yeah.  Okay.  Let's do a demo.
      Okay.  Let's do  let's do Tetris.  Because it has great music.  Okay.  One second here.  Nice clown emoji.  Whoever's name was clown emoji.
      So, again, the URL, if you don't have it in your history, was NESpectre.com.  Or go to that one.  Tetris mode.  Resume.  Okay.  Here we go.
      So you are corrupting Tetris while also voting on what my next piece is going to be.  And there are a lot of you in here.  Holy cow.  So if you all were nice, and all pushed the same button, then I would get that piece.  Or you can continue to just be really mean.
      So what's going on is you're voting on what the next piece is going to be.  But some of the pieces  like here.  Look.
      [ Laughter ]
      Are actually out of range.  So like you're basically picking a piece that doesn't exist, and the game is trying to compensate.  And you can hear what you're doing to the music engine when you press that music button.  I'm doing all right.  And then you're also corrupting that stats panel.  Basically, every time you vote it gets more distorted.  Because all of this  the whole stats panel, those pieces in the numbers, are all represented in RAM as values what should show.  So we're just corrupting that.
      So I can show you, now, how  let's do this.  I can go over here.  And I can send you all back to conjuring.  And we can go to  back to Mario, let's say.  And now I can come over here and I can put you all into Mario mode again.  Love that sound.
      There you go.  And then we also have this, like, extra dangerous mode where you're literally corrupting a completely random byte that could horribly crash the game.  Or do nothing.  Oh, my god.
      [ Laughter ]
      That's fine.  All right.  Is that a vine?  What do those even  what?  Yeah  that's  I'm sure that's fine.  Oh, I can't even  no.  I'm stuck.  I'm stuck.  Okay.  Yikes.  Okay.  Pause all.  So what I'd like to end with here is  oh, oh, oh.  Back to my slides.  End with a little teaser.  We're going to have more games 
      [ Laughter ]
      Such as 200 player track and field and that kind of thing.  Lots of crazy things you can do.  You just  beat a level by crashing.  And here, let's quick show you  oh, man.  Glass Joe, if I can get it started.  No  there we go.  Wait for it.  That's funny if you know PunchOut.  Okay.  So come see us tonight.  7:30. Play more games.  Thank you so much.  I appreciate it.
      [ Applause ]
      Thank you. 

