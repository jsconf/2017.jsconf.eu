TC39 Panel
>> Hello!  Welcome, everyone!  Random enthusiasm!  Wow. !  [Cheering]. That is better than the last break. I don't know whether you had more cake and coffee, but this is really great. This is a new format to JSConf and I'm excited about this. I think it is going to be great. I personally didn't know what TC39 was and now I do and I'm excited. If you're wondering how JavaScript gets standardised, how they are making those calls and how you can get involved, this is the right session to be at. I will invite quite a few people to the stage, and I hope they do something cool because I can't, I don't have the dance skills!  I will invite, Maggie be Miles James, Dan and Dominic to the stage. Please give them a warm welcome. [Applause].  This exciting discussion will be moderated by Elia. You can ask questions on Twitter. We're about to have an insightful discussion about how JavaScript will be built. 
JULIA:  I hope everyone is doing well after the cake and that was great. Thank you so much to the people who have agreed to be on the panel. We have James at the end, there, Dominic, Jan, Miles, and Maggie. Does everyone with their mic on?  
>> Yes.  
>> Yes. 
>> Hello. 
JULIA:  this is going to be really exciting!  I think the question that a lot of people, if they haven't about TC39, the first time they saw it on the schedule. They are going to be wondering what is this. Who would like to take that on?  
>> TC39 is the standards committee that defines JavaScript, so it's been around basically as long, long as the language as been. We meet every month. This is the group that designed ES6 and designing async 08. The spec is designed on GitHub. 
>> The other thing is TC39 works on JavaScript standardisation which is distinct from web standardisation which is done by other standards orgs, so a lot of the APIs that you use, mayor not you're not. People aren't sure session time out is a web API. The things in the JavaScript are small - we're focused on language features, small syntax and core library. 
JULIA:  one thing that I heard is that JavaScript is really a standalone language, used on the web, but it is really like something you can use anywhere. And one thing that people can be interested in is what is a standard, actually?  What does that mean?  
>> Standard is just a document that describes what is - what a certain thing is, what is supposed to happen when you execute some code in the example of a programming language. A standard really takes relevance when it corresponds to implementations, when it's a design that everyone agrees on, and that people can actually take advantage of. There are lots of standards that you can find if you search around, and some of them are outdated, and some of them were just fantasy. I think that the JavaScript standard that TC39 produced does a really good job of striking a balance between continuing to add new things and also maintaining relevance through certain processes. 
>> The term "standard" tends to be overused in a lot of contexts. It's essentially a document that describes the way something should happen. It is not necessarily - it doesn't necessarily describe the way things actually happen, the way the implementers have done it. It is the set-up rules, if you're going to do this, do it like this. 
>> The other cool thing about JavaScript, having a standard and having a pretty solid one, is this is unusual among a lot of languages. Languages - I hope I'm not inaccurate here - but Ruby and Python do not have the standard, they have the original implementation. Everyone who wants to have something compatible with those reverse-engineers it. Maybe this is okay for a server, or a mostly server language, but for something where we have four competing implementations at least in the browser and elsewhere, it is really important to have a central document that says everybody should be working the same way. 
JULIA:  something that is particularly unique about JavaScript's standard is that the standard leads the language, so the C# programming language - I work for Microsoft, I have tonnes of interaction with .NET, they make the standard after they create the programming language, and, in JavaScript, we have the opposite happening:  we create the standard and then the engines pick it up and implement it. So that's a very unusual characteristic that has to do with the nature of the web. 
JULIA:  I think it is interesting that you said you're working with Microsoft. On the TC39 which stands to have "technical committee 39" you're representing the JS Foundation, right?  Can you talk a bit about how you got involved in the committee and also representing the group that you do. 
>> Sure, so, one thing everyone should know is that some people up on this stage do have academic backgrounds in language design and extensive work there, but that's not like a requirement for TC39. For me, I am a very average full stack web developer for Microsoft. I work in crisis management. It has nothing to do with language design at all. I'm nowhere near the language design teams at Microsoft, and I maintain Moment.js, the daytime library. What I found Moment exists is because the date functionality in JavaScript is very bad, and I started like running around Microsoft when I first starting working there a year ago, and I was like, "Does anybody care?  Is anybody going to fix the date?  Still broken!" And nobody - I wouldn't say nobody did - in fact, Brian Charleston's who is Microsoft's representative to TC39, he was like, "I care a lot about that." When we found each other, he was like, "Let's get this done." I had to find a way to get there. The JS Foundation again is a open-source foundation that supports the needs of many of the major open-source libraries in the JavaScript ecosystem, to all of the jQuery is under JS Foundation, Lowe Dash Grunt Webpack, they said if you care so much about this standard, we can send you to go and represent our libraries. That's how I ended up there. 
JULIA:  thank you. We have some people who have been working on the committee for like varying periods of time, so Maggie you've recently joined, and we also have Dominic who has been part of TC39 for a few years. Can you talk about your experience joining and what was TC39 like before?  
>> Yes, it is kind of funny to think - I guess I'm one of the people who has been on the committee longest in the panel. There's a lot of new faces, so I still feel like I'm relatively new. There are a lot of people who are the committee and very well established. My story:  I was a web developer using JavaScript. I got kind of involved in the language just through curiosity. I was like, "Oh, I learned about all these new features, when are they coming?  What is the deal?  I hear Firefox has let and const why aren't they in the language?"  One area I really got involved in was asynchronous APIs and promises, and there was a push to put these in the web platform somehow either through the DOM APIs or the language. I thought it would work well in the language. There was a meeting in Boston. I took some time off work and got the bus up from New York. I presented my written-up fairly formal spec on how Promises should work in JavaScript, and the committee was like, "This is pretty good. Let's get this into ES6." So that was just the beginning of a long journey and a lot of arguments committee and - 
>> Many arguments!  
>> And Promises was certainly not without controversy. I think they've been pretty successful, and after - I stayed involved, I did in - this a lot in my free time, got involved in other web standards. Google hired me to represent in TC39 and do this full-time. That was my journey. 
>> That's pretty great. 
JULIA:  I just want to touch super quickly, you're talking about getting features in the spec. Can you say a bit about that process?  Where do you start and what steps do you go through to get something into the spec?  
>> Yes, so there is a whole formal process, but to boil it down to its essentials, the first step is explain the feature, explain what it would look like by developers, what need would it address?  Does it exist in other languages?  What cross-cutting concerns might there be across the other languages that exist?  Generally, it is convincing people this is a good idea and your solution to the problem is to solve the problem. Then you advance through the stages of increasingly formalising your proposal, writing actual spec text, and bringing it to the committee, and getting it increasingly checked and solidified along the way. 
>> There is a multistage proposal. In order to advance to the next step, there has to be a certain amount of implementation experience. It advances, the spec needs to reflect what is actually implemented, so that way, when it comes out of the other end, you know it actually matches what users are going to be using out in the world. 
>> That's somewhat new. ES6 was the speck that led the implementations. Now they are more intent on, which is very healthy, but I can go through this a lot but I won't. 
JULIA:  we have the won September of a champion. Maggie, can you speak about that at all?  
>> Sure, so the whole, I guess, reason that I ended up at TC39 at all, which actually is a lot big like knowledge Nick's reason which is I heard a heck of of a lot about one thing. For the moment, I am the champion or the person who is responsible for moving forward the fixing of dates. In the language. 
I share that responsibility with Brian at Microsoft, and to get a proposal moved forward through the process, you have to find someone willing to champion that proposal. Now, many people on TC39 represent browser implementers or other large corporations, so we have a few people from Google here. In my case, I actually would be the person who would represent you, because I represent the JS Foundation which is basically we think of ourselves as the community at large, but to get a proposal through, you need to find a champion, and that would be the person who represents you as part of your organisation, Microsoft, Mozilla, Google, et cetera, or if you don't have a larger organisation direct, then come find me or Leo Walter. 
JULIA:  awesome. Those are things that are on development right now that each of you are super excited about. What is the most exciting thing coming up in the next spec?  What is in development right now?  
>> For me, it is not necessarily what's coming up soon, it is what already was developed, and that's modules, right?  I've been working very hard with some of the folks in the Node community to get modules into Node, and they are coming. It is going to take a long time, but they are coming. But, yes, that is the thing I'm most excited about seeing advance. 
>> Yeah, like James, coming from the browser perspective, I also am spending a lot of time getting modules. We put out the syntax for them in ES6 but no semantics, so saying modules in ES6 is not really true in a large sense. So we're finally getting to that point. I spend a lot of time on that. I've also worked on shared array buffer which is the subject of an upcoming talk. We had a lot of fun. It is similar in that it needs to integrate into the web platform. We need to say what threads can you share this array buffer between?  It's not a question for the language but a thing that defines the threads, the web workers and web platform. Finally, I'm also championing a proposal called async adderation. 
>> A smaller thing I'm working on is features for regular expressions. This allows to you do things like reference unicode categories for characters in a regular expression, or also give names to groups that are being captured, and a couple of other things. I'm definitely excited about that, and the implementation is in V8 behind a flag, and I'm also work on a specification for arbitrary sized images in JavaScript with operator overloading. [Applause].  
Also some features for classes. I'm definitely interested in getting more feedback from this whole group on all these. 
>> Work on the big instep before the classes. 
>> So, what I'm most excited about right now is not a feature of the language, but I will call it a feature of the committee. There is a lot of work going on right now for a code of conduct within TC39, and that is interesting because many code of conducts are about conduct of a community, which is very different than conduct of a committee, so it is interesting to try to reconcile the differences between this and find the language that works, but it is being put through the process, and I would say, I've only been to three meetings, but I've seen the conduct change just with this being on the table. 
>> I suppose it is obvious I'm excited about date!  [Laughter]. I will - I do want to mention, along with the 262 specification for the JavaScript programming language, TC39 handles 402 which is the internationalisation APIs coming from the date/time space, this stuff is really important. I'm really excited for everything that is going on in Intel because it will really help people produce more global applications. 
JULIA:  we also have a number of questions, so we out - so we sourced a number of people from you people, the community through this hashtag, and I'm going to read out a couple of them. Unfortunately, the panel is very short, because like all of these topics are fascinating and could be a talk all on their own. We selected a couple of those questions that we could answer in the time that we have and I'm just going to ask a couple of them now. One of the questions we were asked is what is the state of the binder operator, and what needs to be done to advance it?  That came from Tobias. 
>> I think I can take this. The bind operator is a fairly popular proposal:  briefly, the idea combines several ideas into one. You want this method-change syntax so you can define things in another library but use them as if they're methods on an existing library, so in other languages, this might be called extension methods, or something like that, and this is a pretty great idea because then you could define something like low dash but use it as if it were on a native array as if they were methods. It also gives you syntactic sugar for binding and extracting methods, and a number of other things, and there are variants of this. There is a pipeline operator where the bind operator uses this, the pipeline operator uses the first argument like low dash. The problem that it's this complicated space with a lot of decisions about, "Well, do we really want to tie it to this or the first argument?  Do we really want to tie binding into the story?  Or do we really want to make it more general?"  Every time somebody's tried to pick this up, there's so many people who feel the opposite way, largely in the community. The committee I think would be open to anything if we had a clear signal from the community, in my perspective. It has been discouraging trying to get it moving forward. The other thing is we just - you know, well, we have had champions, but I think they've gotten discouraged. I don't know if that's fair in Dan's estimation?  
>> I would just want to phrase, reiterate by saying this is a big opportunity for saying this is a big involvement for - opportunity for community involvement and it is a positive. The committee is definitely interested in this proposal once we have more of these kind of signals. 
>> Standards are that are made without community involvement are not good standards, period. [Applause]. 
JULIA:  that's a very good point, because there is sort of an issue with that how many people know about this committee, and they don't know how to get involved with it, and this is also an opportunity for us to get more people involved. James, I'm actually going to direct this at you because you mentioned modules, and someone has asked, "What is the status of ES Interrupt - module interrupt" and it's been raised many times, and they're wondering what the status is. 
>> This is an area where the browsers are ahead of Node. There's still some variance in the browser and Dominic could speak to that better than than I could. As far as Node implementation, we're a long way off - until at least a year until the community has something to work with. We're going to get there. There is a lot more issues on the servers than on the Node side, that the browsers just don't have to deal with, so it is a lot, it is a very difficult technical problem. Once we get there, I think by the time we get there, the browsers will be like, "What took you so long?"  We will be able to ensure pretty good interrupt, but, yeah. 
>> Yeah, from the browser side, we're trying to do as much as we can to iron out the bugs in the underlying infrastructure, so that when Node is able to tackle it, we can say, "Okay, it's ready for you." Again it's just this multi-year process. First we had module syntax and how module for the browser. Semantics are bolt-proof until you have them working in two environments. It's not a great interface. It's tough. 
>> A big challenge here also is that Ecma 262 only defines the semantics for models but not for loading. There are different constraints. So the browser can't block the main thread while it's loading everything, so you have only like this asynchronous load phase before asynchronous execute operation, whereas the way Require works is synchronous execution through the whole tree when it's the loading. This isn't - we can reconcile this, but it is just - it breaks my brain and many people's brains. It takes a lot of time to find a way to do it that allows both the code in the browser and in Node to run similarly. What we want to avoid is a case where you need to start worrying is, is it running in Node or in a browser?  
>> I published a couple of articles of this on Medium. There's likely to be another one in a couple of months. So, small hint!  That will give a pretty good update. This is a whole topic that can take a long time to discuss. 
>> Please subscribe to the news letter. 
JULIA:  another question:  will you drop any features from JavaScript?  
>> I will take this. So, with come the Node perspective, just looking at Node, just looking at Node, every time we want to deprecate something or drop something, there are pitch forks and we have to go running. Imagine that on the language level. Probably not. 
>> Yes, I mean, think of it from a semantic versioning perspective:  Node gets to make breaking changes it gets to say, "We've incremented the major version number, we look at the change log and upgrade." Browsers don't, they just update every six weeks, if you're lucky, every six months, or not. The users certainly don't get to look at the change log. From that perspective, browsers are always on major version 1.0. 
>> On the other hand, it doesn't upgrade on a completely 100 per cent strict "you're not going to see any changes that might break things". ES6 did make a whole bunch of changes that did break things and browsers had to come back and say look, we tried shipping this, and it actually broke things in the way that the committee didn't expect because the committee didn't want to break things and it didn't want to stay compatible, so there was a sort of back and forth, and we arrived at a more compatible version, but there are cases of breakage that are very strange, like adding method to arrays, is observed in some browsers to break their users even if other browsers don't find it can be breaking, so what actually is a simpler version, a major change we can't do is a little bit fuzzy. 
>> Certainly, like and these are tiny changes. We're not going to remove with "with" or "var" or something. 
JULIA:  we will move over to one question from the community which will take us into the next, which is what as a panel or as people are you doing to become more visible, and better connected to the community?  
>> I will take this one. This speaks to how I actually got involved. Last year, throughout Node and TC39's relationship, there's never been a great relationship there. They weren't talking to one another. Here you had one of the most popular JavaScript platforms, and there was no connection, no communication going on with the community or with the committee. It really came to a head last year, it was just a tonne of public arguing on Twitter which is always great fun. We came to realise if Node wanted to engage, we needed actually to show up in the meetings, get involved in the discussions, provide feedback on the proposals as they were being proposed - it's a novel concept. It goes back to my own thing that would you community involvement, it is not good. We wanted to become involved. It was literally a matter of just showing up. 
JULIA:  so I think something that a lot of people will be interested in is, like, what as audience members, what can they do - also myself - what can I look at?  What's a great place to start getting involved?  
>> The standard is developed both in the in-person meetings and also on GitHub. It is developed with patches. People can submit PRs. We do have a number of community contributors who are not committee members who do submit DRs and get real spec changes and really help us develop a lot of difficult details with this specification. So there is one main repository for the master spec, and there are a bunch of smaller repositories for the proposals which are not yet merged into the main spec. In these proposals, it's great if people file bugs or add issues, or at comments to bugs to give feedback on the proposals. Some proposals are available in Babble or cross-compilation environments, and you can use them in your own code, and give feedback to us based on that, especially if you can do it in GitHub issues. That's the most accessible way to propose champions. 
JULIA:  so www.github.com/39.
>> this was been a - this has been a big change. both in TC39, the spec used to be developed in a Word document which the editor kept on his computer and sent out to a mailing list once a month, so having it a visible changeless - where he can submit requests and issues, it is pretty great. there is a lot more we can do. I hope that we are trying to meet you guys where you are, and certainly where I like to spend more of my day instead of my inbox. 
>> one place that you can look at well is TC39/agendas. and, on agendas, you can find the agendas of the next meetings, and this is a great way to discover what language features are actively being developed. because there are lots of different repos, it can be really hard to find a focus. if you look in agendas, you can find that. 
JULIA:  there is so much that we want to talk about. I guess the best thing we can do now is [sound cut] specifically to ask, then I believe we've chosen a location to sit for a bit and take your questions. 
>> we will go to the - all of us will be at community space afterwards. there is stuff scheduled - 
>> Google booth. 
JULIA:  these wonderful folks will be there to answer more questions. there are lots of topics and questions about diversity workers being done now. the TC39 has been for around for a while but pertinent discussions that are still happening. make yourself - if you have questions, come and ask, and feel free to get involved. thank you. [Applause].  