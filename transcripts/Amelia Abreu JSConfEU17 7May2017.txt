From Advocacy to Innovation: How JS Developers will shape the future of Internet Security, Privacy and Trust
Amelia Abreu

Live captioning by White Coat Captioning
>> Okay?  Hey, right, there we go.  Hi everybody.  We have a few survivors, it looks like, from last night.  I don't know, did everybody storm the bar or what happened?  I heard fine things happened.  Let's get everybody sat down.  If you are coming inside, sit down and we will get you started very, very soon.  Our first speaker comes all the way from Portland Oregon, USA.  Normally we get whoops at this point but I think everybody is far too hungover for this.  She is a design researcher and a founder of UX Code School.
AMELIA: Night School.
>> That's it, so she has come all the way over the Atlantic to join us here so would you please give a very warm welcome for Amelia Abreu?  [Applause]
AMELIA: Thank you.  Thank you, hello?  Is this - is this on?  All right.  Well, thank you so much for coming out, especially after we drank all the beer last night.  Today I will be talking about how JavaScript does/can change the way that we build tools and how they already are.  And this is probably not news to any of you all.  So my name is Amelia Abreu, and like Charlie graciously introduced me I am a design researcher, and I've always been obsessed with categories.  I'm a Cuban American from Texas, who has lived in the northwest for most of my adult life, so it's hard sometimes to answer the question, "Where are you from?"  And I would like to start out with a point that categories and distinctions matter and this is probably not news to JS devs, after all language without classes, like requires imposed classifications.  Yes, so today I'm going to talk about distinction and classification, why these little things matter, share some of my notes and observations from working on development and security tools over the past few years and make an argument that there's a lot at stake here and that we can do better and we need to do better, from a useability standpoint I always say that usability like security is best bigged in early on and as full stack JS reaches more and more momentum, it's more important to think about this.  So who am I and why am I talking about this?  I'm a design researcher and I will speak a little bit about how I hate the word "user".  I would never describe anyone I respected as a user, but the term user experience seems to have stuck to this area, and over the past few years I've been working more on security and engineering tools, and as a result I've interviewed a lot of developers and worked with a lot more, and I often find that my relationship to the Deaf community is a little bit anthropological and prior to this I worked in Seattle and before that I was a librarian and my first career was as a music writer, and when I look back on these various threads, the thing that these all have in common is that they all involve listening to people talk about complex and technical subjects.  And this ongoing interaction with classification and systems.  I also want to note that something that has shaped me is that I am a child of the 1980s Texas hardware boom.  My grandfather worked for Texas Instruments, my mother was a mainframe operator and neither of these were glamorous jobs but they definitely shaped my understanding of how - the pecking order of hardware and software and obviously we are living in a much different round these days.  So first I am going to talk about distinction, and taste classifies, and it classifies the classifier.
So there was a study on thousands of folks and it was found that their interests reflected not only economic status but also cultural status so if you like Petula Clarke that puts you at a very middle brow status but if you like shopping at the flea market that puts you in this square of artistic producers and cultural capital, and this is something that I think we can think about in less of a stratified way but in a way of thinking: okay, the way that we work, the way that we are, aesthetics matter and they say a lot about us Bordieu also will matched this to the foods that we like to eat and then a gastronomic magazine classified this so where your pickles come from says a lot about you.
So in the past few years I have been working a lot on developer tools and the term developer experience has come about, and I like it okay because the word user, or as Laurel says "that demeaning little word user", is not something you would use to describe someone you respected.  I would call a friend's bad boyfriend, "Oh, he is a user", so how do we bring more of that sense that we are working with folks to build tools that they can use, tools that they will integrate into their everyday lives and everyday work, and that as developers we will be using whatever is at our disposal to build better things for the end user, or for someone else down the line?  There's not really a good nomenclature for that.  If anyone has any suggestions, feel free to bring them to me after the presentation.  Yes, so how does one do this?  I find that this is something that is often mysterious.  I work a lot with ethnographic interviews which means I will bring the team that I'm working with into the field to go hang out with the people who will use the products that they are building, and I always say that I'm going to write a book about doing user research that is asking dumb questions over and over.  I will often ask people what seem like very obvious questions and then just listen, and that takes a lot of humility and also patience but when we do come to users with little expectation and little assumption, that's where we can learn the most about work patterns, about needs, about work-arounds.
Yesterday's presentation - it blows my mind, it's blanking me because I'm jet lagged but there was a really great explanation about work-arounds in a presentation yesterday that I loved.  And for devs it's often hard to distinguish between what about the users of your product are going to be different than you and your team and I always like to start with this question: well, what text editor do you use?  Because if you are using Emacs you will have different keyboard shortcutting and different usage patterns than say someone using VIM.  And this is often an issue when it comes to developer tools because they often come out of a roll your own solution.  I automate something in my job; I share it with my boss; I share it with my team.  We say, "Oh, let's bring this to the greater public".  This onion you see here, this comes from a framework called cognitive work analysis which was developed in the 50s to understand how pilots and nuclear power plant operators related to their dashboards and negotiated their work and I like to call this the Homer Simpson doughnut because at the end of the day we are all Homer Simpson trying to make sense of something that's often complex, and not really designed for us, and you can see here this was using the Python DES to better understand how they used the tools.  So I often work with - I work with fairly conventional hardware companies and software companies and the idea of full stack JS makes them very nervous.  It's like, "Oh, the inmates are running the asylum", and as folks of the Node Foundation like to say all 500 Fortune companies are running Node however this does disrupt long held beliefs about web devs in this hardware-centric hierarchy of things.  Oftentimes when I go into the field and interview JS devs the way that they work is different than say some folks working "closer to the metal".
I will tell you a little bit about the differences that I've found and this is based on qualitative research.  I do not have large scale demographics to support this but this is something that I would urge you all to think about, is thinking about where can we get, you know, collecting more demographics about the backgrounds of your fellow JS devs and quantifying how this is a more diverse and less conventional community than we might have previously ascribed to software or server side development.
That's a first insight and it's probably not news to anyone here, is that, because there is no one standard way to become a JavaScript developer, oftentimes JS devs will acknowledge this plurality and often I will interview folks who work in teams together and they will say, "Yes, like I do things totally different to him", and this is something that I find that JS devs are far more comfortable with than some of their counterparts.
This is a strength.  I would argue that this is something that we want to acknowledge and see as a strength.  I think it makes for better products, a more diverse user base.
I've also found, and this is something that seems a little bit wishy-washy but I want you to bear with me, I found that, since many JS devs came of age during desktop-centric frameworks but have since moved into mobile and Internet of Things projects, they have a better conception of code living in the wild and living in the physical realm, and I also find that a lot of the JS devs that I interview have interests in the physical realm, whether they are knitters or skateboarders or mountain bikers, and this is something that is seen not as anathematic to making software but something that complements it and this is once again pushing back on the more immaterial sensibilities of the tradition, you know, neck beard security developers that I work with.  That term is used with respect.
The last and maybe most quantifiable and most important finding that I've made over the past few years is that JS devs oftentimes coming from front end work have a better idea of advocating for the end user and they often speak with a desire to help others.  I was working on a Internet of Things security tool this last year and one of the devs said to me I don't want to make an insecure baby surveillance device.  And this was very self-aware, I thought, and also very aware of the impact that one's work had in the world, but we are at a crossroads here.  Having a desire to help others is not the same as actually helping others, and I find that notions of advocacy are all well and good but they are often - there's often a conflict about how to actually put those into action.  I often say that doing what I do, I often come to the table when things are already on fire.  And my goal in the work that I do is helping you all to smell the smoke, because here's the thing: I am very sick of empathy as a corporate buzz word.  Empathy for me is Bill Clinton saying, "I feel your pain", it's a gratifying thing to dispense of and it's often, you know, rewarding to hear it, if someone empathises with you, but empathy without action is pretty meaningless.  So how do we build advocacy?  If you haven't run across this scene from the group Indigenous Action I would really encourage it and I find that we need to think about our user or end users and the folks that we work with as accomplices, not allies.  We want to be with them while they use the products that we build, and that we need - and that in order to do that we need to build trust and consent.  No one is going to let us in.  No one is going to trust us until we build that trust, and we build that trust by walking alongside them, by acknowledging those diverse viewpoints and building meaning into our data gathering.
Oftentimes when I work on developer products, there's not a really good explanation of who it's actually for.  This is something that I find that JS devs have a very low bullshit meter for.  You know, what's the story behind this?  Why am I supposed to use it?  This doesn't make sense with what I'm doing.  I worked on an API this past year that was developed by folks working in CEE and the way that the calls were formed just didn't match JS syntax at all, not that there is any rhyme or reason to JS syntax but that's not my field of expertise.
Yes, and this is something I find with developer tools is that we need to give a reason for folks to use it.  We need to exculpate the stories and make a case for it because unless - and there are some notable exceptions to this, but unless we make a case for a usable security solution or for an easily implementable security solution, it's not going to happen.
I think that in this community our diversity is our strength but we need ways to understand our impact and I will repeat my plea to build more data on demographic diversity; build more data on who is deploys JS frameworks at every level of the stack and how it's different, how workflows are different, and how this makes for a better impact.
And I think that this is especially important when our work impacts very vulnerable people.  In the jargon around the Internet of Things, there's a big buzz word.  If we are going to be building things for people with limited economic capacity we need to be more economically aware of how our work impacts them.  Likewise, as we - did anyone follow the class action lawsuit?  As we put connected technologies into realms that we would consider to be very private we need to make sure that we are protecting our users' data and notions of empathy and notions of advocacy are all well and good, but until - but the rubber hits the road when we are in this very intimate and necessarily trustworthy place.
And this is the argument I always make to my clients: it's that we shouldn't discount even as generalist or tinkerer devs, if they cannot rock your security tool then we are not going to have security, and we need to invest in design and documentation that does accommodate a larger span of users, even when those users are not what we consider to be traditional devs or traditional implementers of security.
This is a big task and I think it's something that will require rebuilding trust not only amongst new folks coming in but also amongst the long range users of our products and at every level of software and hardware development, so what do we do next?  Where do we go from here?  This will probably be no surprise to you but I advocate for understanding developer experiences in every step of the process.  If you are working on a roll your own tool, put it in front of other people and do this early and often.  IBM did these studies in the early 1990s that said that there's a 20/1 ROI on investments and usability and that ROI number was increased earlier on in the process.  Usability testing is huge, and bringing your users in, making a more participatory stance when developing your tools and their documentation, and I think that organisations as a whole can invest in understanding these differences in values and skill sets.  Because ultimately I hope that we can work from a standpoint of the ethics of care.  This is a big project that I have been working on conjointly, but how do we see our work as caring for our users, not just giving them something cool to use?  And I think that this is something that we can bring to our work and that reminds us of how important what we are doing actually is.
Lastly, let's work together.  I recently started a programme called UX Night School bringing design research tools to developers and designers in the field and I would love to work with you, so thanks.  [Applause]