How Does Javascript Math?
By
Meara Charnetzki

      >> Live captioning by Amanda @asignia @whitecoatcapxg
      >> Hey, folks.  So the last talk for this track.  Meara is up next.  From what I understand by the abstract, there will be an appearance by Donald Duck, is that correct?
      >> That is correct.
      >> Yeah.  I don't know if this is a deep dive into math.  I have my own experiences of weird things happening.  So please give Meara a warm welcome.
      [ Applause ]
      >> Hey, folks.  So thanks so much for being here.  I know it's been a long day.  But glad to have you all.  And getting excited to learn more about math and JavaScript.  So when I was writing this talk, I did what pretty much any programmer would do and I just Googled.  I literally Googled JavaScript edition.  And the third Google result, if you will notice, is this rather poignant stack overflow post where this poor person, addition is not working in JavaScript is what they say.
      So they're trying to learn JavaScript, and they're doing what thing should be a pretty simple thing and just trying to add a couple numbers together and they're saying it's not doing what I want.  It's giving me two plus two equals 22.  And, like, everything I know about math up to this point in my life has told me that is wrong.  It should be four, right?  They're extra confused because  not only is addition being weird, division, multiplication and subtraction are working.  And there's something weird going with addition.
      I sympathize with this person.  This is kind of legit.  Your entire life you have known how math works.  And you're starting out in this language of JavaScript, and all of a sudden, it's all wrong.  It's not just beginners who feel this way about math in JavaScript.  There are a lot of moments when JavaScript will violate your expectations about how math is supposed to work.  So this is a slide from a lightning talk by Gary Bernhardt.  It's four minutes of him pointing out every ridiculous thing he can think of that happens in JavaScript and a few examples in Ruby.  These things make no sense, right?
      And this slide, especially, struck me because here you are just trying to add some things and  what is happening up here, right?  Like this is madness.  It makes no sense at all.  So I watched this talk, and it's about to happen.  I felt kind of like this, right?  Like I don't understand any of this.  This makes no sense.  I thought I knew how to code.  I have been doing this for, you know, a while now.  And I cannot understand why JavaScript is behaving this way.  Fortunately, the talk doesn't end here.
      So I decided you know what?  Somewhere buried inside this language there is a reason that JavaScript is doing this.  So we're going find out.  We're going to go on a little adventure with our friend, Donald Duck.  And we're going to figure out what exactly is happening here.  Hi, my name is Meara.  I'm a programmer from Chicago, Illinois.  That's my Twitter handle in the middle there and I work at a place called Table XI.
      And we're going to go on a full adventure today.  So we're going to do some math.  But before we do some math, we're just going to do a quick introduction into some basic things about JavaScript just to make sure we're all on the same page, using the same vocabulary.  So object types.  They're a thing.  There are a few different kinds.  JavaScript has six primitive object types.  And we're just going to go through them one by one real quick.
      So a Boolean we probably feel comfortable with.  True or false.  Only two things it can be.  A number in JavaScript is pretty much unlike most other languages.  JavaScript doesn't distinguish between notes and integers.  And it also has some interesting things here.
      We have this NAN thing, or not a number.  Which  fun fact  type of not a number is number.  Hilarious.  Well, that makes no sense.  It's not a number, but it's a number.  And the most common way to get not a number is probably dividing by zero.  We also have plus and minus infinity, which are their own special things.  We're not really going to worry about that for the purposes of this talk.  But they exist.  Yeah.
      Strings.  Pretty much anything you put in quotes.  Objects.  They can have data attributes, they can have functions, they can have a lot less stuff in them than this.  And just be literally an empty object which we would represent by two curly braces just next to each other.  There's null, which is what you use when you want to assign something a value that's basically nothing.  Which is different from undefined, which is what you get when you've declared a variable, but you've never explicitly set the value of that variable that you've declared in your score.
      There's also a number of data structures.  For the purposes of this talk we're only going to worry about an array.  Which you can think of as a collection.  So it could be a collection of the same types of things.  This first example here is a collection of integers.  Then we have another collection here with a string, a number, a Boolean and a null.  And those are equally valid and fine.
      So let's do some math.  So we're going to start real easy and we're going to do something fairly straightforward, I hope.  And try adding some numbers and strings.  So this is the participatory section of the talk.  So please just shout out  what do we think is going to happen when we give the JavaScript engine  this first example here  two plus two?  Four.  All right.
      So  oh, I ruined it.  Okay.  Well, four.  Spoiler alert.  What do we get with apples and bananas?  Apples, bananas.  And what about a string two plus string two, what do we think we're going to get?  22.  All right.  So hopefully no one is too shocked by this.  But, you know, it is weird, right?  It is a little strange that that's what JavaScript does.  And so we actually can see from this example that plus actually means two different things.
      So the first one is number edition, which hopefully we're all comfortable with.  And then there's something called string concatenation, which, if you don't know, is literally just what you do when you want to smoosh a bunch of strings together to make a bigger string.  It's called concatenation.
      So this is great.  Like we're cruising along.  Nothing too crazy's happening yet.  So how about we try adding numbers and strings to each other?  So what do we think is going to happen when we have string two plus number two?  22.  Okay.  And we do.  Awesome.  What about number two plus string two?  So four.  Okay.  Some people say four, some people say 22.  We got some agreement here.  It is 22.  The order of the operands does not matter.  Which also is a little surprising.  You might think that you're running a method on a string, it should be a string function, right?  Not this case.
      How about two plus apples?  Two apples.  Awesome.  So basically, what's happening here is no matter what order we put them in, any time we're adding numbers and strings together, JavaScript is always going to turn everything into a string and then concatenate them together.
      And the way that it's going that is by something called coercion, which is implicitly converting a value from one type to another.  So we basically never told JavaScript that we wanted it to change those number twos into string twos.  It just kind of looked at the expression we gave it and decided, hey, I think you want a string.  So it just kind of made us one.  That's pretty magical.  You might like that.  You might be a little freaked out by it.  But, oh, well, that's what it does.
      So, at this point, I think we can get to a place where we can make a really simple basic model about how we think addition works in JavaScript.  So if either A or B is a string for the expression A plus B, we're going to do string concatenation.  And if we need to do coercion to make those things into strings, we will.
      Otherwise, if both A and B are not strings, we're going to do number addition.  So I'm feeling pretty good.  Seems like a good model, fits the data that we have so far.  Let's try something a little more interesting.  What if I want to add other things?
      So here's some slightly more interesting examples.  Let me ask you this, what would you want your programming language to return to you when you're trying to add to arrays like we are up here?  What would be your desired outcome from that?
      >> AUDIENCE MEMBER: [ Away from microphone ]
      >> Okay.
      >> AUDIENCE MEMBER: [ Away from microphone ]
      >> Okay.  Okay.  So we have some different answers.  I might want an array of one through six.  Like I think that would make some sense.  Other program languages certainly do that.  What does JavaScript do?  What some of ya'll suggested, which is it smooshes them into strings.  How about true plus true.  What do we think we're going to get there?  Two.  Okay.
      Undefined and null?  We got some zeros.  Not a number.  Null and null?  Okay.  Now we're getting zero.  What about empty array plus empty object?
      >> AUDIENCE MEMBER: [ Away from microphone ]
      >> Object to object.  And how about empty object plus empty array?  Zero.  So this is  this is especially confusing to me.  This makes no sense at all with how I understand math.  So at this point I'm feeling a little more like this.  My fancy model didn't quite make me happy here.  So  okay.
      So it's getting a little scary.  Things are getting kind of weird.  But we're going to hit the books and we're going to do some math and we're going to figure out what's going on.  So the authoritative source for what's going on in JavaScript is the ECMAScript specification, which is a long document put out by the people who write the language.  And the ECMAScript for the addition operator is this.  This is a lot of text.  You don't have to read all of this.  I have hopefully boiled it down to the definition on the next two slides.
      So this is a little bit of a revised version of our earlier model here.  If either A or B is a string, or it's primitive's default value is a string  which is something we're going to learn about, soon  we're going to do string concatenation.  And sort of under the hood, we're going to coerce these things to strings if we need to.  Otherwise, if both are not strings, number addition.  And coerced the numbers as well.  Okay.  We learned some things.  We've got our model.  Let's go try and figure out what's happening here.  I don't know about you guys, none of these operands on the left really look like strings to me.  So I'm going to assume we're going to try to do number addition.  So let's try that.
      So here is the table that the script provides for us on how to convert everything to numbers.  Undefined goes to not a number.  Null goes to positive zero.  In case you're wondering, yes, there is a negative zero.  Why is there a negative zero?  I don't know.  But there is one.
      Booleans.  It'll be one if the Boolean is true.  If it's false, it's zero.  Numbers are already numbers.  You don't need to do a conversion.  Strings, we will never be trying to do number addition on, so we're not going to worry about that.  And objects are a little more complicated.  So we're going to talk about that a little later.  But I think we've already pretty much learned some useful things.  So let's go back and take this new knowledge and try and do some math here.
      So already we've explained three out of our six cases.  Right?  We have true plus true, true goes to one.  One plus one is two.  Undefined and null.  Undefined goes to not a number, null goes to zero.  And not a number plus zero is still not a number.  Null plus null, zero plus zero is zero.
      So that's, like, not that bad.  But we still have these three kind of little trickier things here.  So let's go back to the first part of our definition.  And we kind of glossed over earlier this parenthetical expression here about primitives and default values.
      And when I was conducting this definition from the original ES specs, I literally took the first, like, six or seven steps and smooshed them all down into that one conditional.  So figuring out whether or not you should be treating this thing as a string is actually kind of a production.  And so the first thing that we would want to do to determine should these operands be true to the strings?  Is called too primitive.  These are primitive types, as you remember.  And so sort of unsurprisingly, when we look at this table, for anything that's already a primitive, when we call to primitive on it, it stays what it is because it's a primitive.
      For objects, however, it does something a little bit more complex, which is finding its default value by calling this internal method that they had called default value and passing it a hint.  In this case, we're passing a hint [audio out]  to do one of two things.  We're going to try to turn it into a number or into a string.  And because we're passing the string hint, we're going to try and turn it into a string first.
      So basically, any kind of object that we throw in here is going to be treated as a string.  So if we go back to our examples, we've got this set of arrays.  We call to string on both of them.  We end up with these two strings.  We smoosh them together.  That's not too crazy.  For our second example here, we've got empty array plus empty object.  To string on both of these.  We have empty string plus the string representation of an object.  And so we get the results of concatenating those two things.
      So this is great, right?  Like we've explained now five of our six mysterious examples.  But we've still got this thing down here which doesn't make a lot of sense to me.  Like it's still not really fitting in with the model that we have.  And why?  Right?
      So there's something I didn't tell you.  There's something that JavaScript doesn't make superobvious, at least it wasn't superobvious to me.  Which is that the plus sign casts anything to a number.  So you don't ever have to do addition.  Like you can literally just use this as an operator and prefix with whatever you want with the plus sign and it will automatically convert that to a number.
      So at this point, I'm feeling kind of like this, right?  Like I did not know any of this.  What is even happening?  What is reality?  Like this is madness, right?  So here we're back here.  All right.  We learned that interesting fact, but I'm still not getting how we're getting a zero.  And turns out there's one more gotcha.
      It is this beautiful set of curly braces right here.  Throughout this talk I have been referring to this as an empty object.  That's certainly what I meant when I typed it.  That's what it looks like to me.  But actually this notation is ambiguous.  So, yes, curly braces can represent an empty object.  It can also represent an empty block.  A block, as we know, is just a group of code.  And so an empty block is just a group of code that does nothing.  So what happens when the JavaScript engine sees this expression, it says, well, hey, I have a group of code that does nothing.  And then I'm casting an array to a number.  And so it gives us zero.
      And, oh, my gosh.  We've solved this problem.  This is fantastic.  Although small parenthetical here, this the only true in certain browsers.  It's not implemented  it's not implemented the same way across the board.  So some browsers will see that as an object.  Some will see it as a block.  And you don't know.  You don't know what's going to happen.
      This is great, right?  We've figured out all these examples.  I am no longer mystified by how addition works.  But what about our poor friend on stack overflow?  Have we solved their problem, why is addition so different?  And turns out if we go back to the ECMAScript spec again and look at multiplication, division, subtraction is not represented here, but it's also the same.  Which is that we don't have any kind of conditional expression here.
      So rather than trying to figure out, are we doing regular math or are we doing something else?  We're just straight up converting everything to numbers.  There's no confusing conversions.  And we just do math as specified.  So if someone were to give you strings and try to divide them and they were numbers and you could call to number on them successfully, it would totally work.
      Which is not true for addition.  So that's what was happening for our poor friend.  So this is  this is great, right?  Like you might be wondering at this point, okay, I learned something about JavaScript addition, hopefully.  Hopefully you learned something.  What happens the next time I run into something weird with JavaScript and, you know, I'm feeling like this.  Or maybe like this.  Or maybe like that, right?
      And the answer is, well, there's things you can do.  The first thing, I would say, is experiment, right?  Like pull up your favorite repple, play around.  Do whatever weird things you can think of, and try to gather as much data as you can about how your  whatever you're trying to explore behaves, right?
      Step two is to make a guess, right?  So in science we would call this a hypothesis.  But basically, this is your first approximation of how you think this thing works.  And it might be wrong.  Or it might be not all the way correct.  But that's okay.  Because you're going to iterate.  Which is step three.
      You know, try and break your model.  Try and figure out what cases aren't covered.  If you're lucky enough to have documentation, this is a good time to read it.  And try and figure out as much as you can and refine your model.  And step four is  you understand this.  So that's fantastic.  And you can have a dance party like Donald Duck.
      So that's pretty much my talk.  Before I go, I just want to thank the people who helped this talk become a reality.  My past and present coworkers, all of whom are fantastic.  And obviously where I work, Table XI.  If you're ever in Chicago, come on by.  We'll feed you lunch and we're a pretty friendly group.
      And if you want to read more about any of this or just watch Mathmagic Land which is also affect, links are here.  That's pretty much it.  Thanks so much.  Hope it was fun.
      [ Applause ]
      >> That was great.  Brilliant.  Yeah, at the backtrack in a couple mines.  Starts at quarter past 6:00.  In a couple of minutes.
      
      >>
      >>
      >>
      >>
      >> Live captioning by Amanda @asignia @whitecoatcapxg
