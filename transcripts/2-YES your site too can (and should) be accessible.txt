"YES, your site too can (and should) be accessible. Lessons learned from building FT.com"
Laura Carvajal

LAURA:  Good morning, everyone.  I was in the audience for a talk on accessibility a few years back much like you are right now, and I was sitting with some colleagues from a previous job and I remember feeling stuff like, well, this is really nice, really cool, but does it really apply to the thing that I'm building?  I was working on a mobile site at a time and I kept hearing about all this keyboard stuff that I had to look into.  So that didn't really matter to me.  And I thought, well, maybe we were starting a new project, so it felt, like, there was this huge gap between the thing that I was building and accessibility.
    And looking back, I'm honestly a little bit embarrassed to admit this, but I also like to full own having been there because it helps me appreciate just how easy it is to feel that way, and just how far accessibility can be from the thing that you're doing.
    So fast forward to 2016, I was working at the Financial Times, we were building the fastest, greatest new site out there.  We released that October.  We replaced our old monolithic website and it was a great success.  We were winning all these awards.  We were excelling at performance, security.  So basically every metric that we set out to excel at, we were.  So one thing we decided to look at was accessibility, thinking, well, we're great at all these things, maybe we're great at accessibility, too, just magically.  But unlike performance and security, we hadn't really put a collective effort into accessibility so no surprise, we weren't very good.
    And well, since this talk is about the lessons we learned, that was really our first lesson.  Accessibility doesn't just happen; you have to make it happen.  So my name is Laura Carahal.  And I work at the Financial Times.  And today I want to tell you about the lessons we learned once we realized we had built this beautiful performant thing that couldn't really be used by everyone.  And so today, if you're in that clays you're wondering if accessibility applies to your project, I hope you walk away convinced that it does and that's really easy to get started.  So what is accessibility?  Many definition out there but there's one that I really, really like because it strips it down to its core.  It says:  Web accessibility means that people with disabilities can use the web.  That's it.
    It just boils it down to not denying anyone access to the thing that you're building.  To go beyond this a little bit, I want to tell you a quick story.  I was in that shopping mall with my daughter a few weeks back.  It's a modern shopping mall in London, Wimbley, and we were going down that escalator down there.  And she asked me, while we were going up, how does someone in a wheelchair get to do what we're doing?  And I told her, there's an elevator somewhere, and as we're going up, she says, where is it?  And to be honest, I couldn't see it.  It was only when we got to the top, that I could see at the very long end of that hallway, I pointed it out.  And she said, well, a person in a wheelchair would have to go all the way there, and back, that's not fair.  And children have a way of seeing things for the way they are.  And so even though I explained regulations and minimum things that you have to comply with, she was totally not buying it, it was not fair.  And that's the truth.  I mean, this was a modern building that met all the requirements but you had that unfair situation there.  So I'd like to say that accessibility goes beyond not denying access; it's about ensuring that the access that you provide is fair for everyone and I'm giving my daughter full credit for that quote.  So we've covered what accessibility is.  In terms of disability, it can be divided into four categories:  Physical, visual, hearing, or cognitive.  These could be permanent disabilities but we also have temporary and situational disabilities.  
    So, for example, if a permanent disability is deaf and hard of hearing, a temporary disability could be, in the dotted orange box there, having an inner ear infection.  So for a period of time, you can't hear very well, or a situational disability is, you're in a noisy place, and you can't hear things because there's noise preventing you from hearing.  So we designed something for someone deaf in mind by adding, for example, closed captioning to your videos, that benefits anyone else that falls anywhere on that spectrum.  So getting back to permanent disabilities, as far as permanent disabilities go, there's about 1 billion people in the world with disabilities, and when you factor in your own userbase and their demographics, you can get a clearer picture of what that number looks like for your business.  So we did that at the Financial Times and that worked out to be about 20% of our users because when you factor in the age distribution of our readership, that tends to skew a little bit older.  So we got a higher number there.
    So if you're anything like the FD, they have a wide audience, consuming the products and the services that you put out.  You probably go through great lengths, too, to support all the members of that audience.  So, for example, you have people on IE 8 and that only makes up about 5% of your userbase, you're probably making sure that they get a good experience, or at least an acceptable experience so all of a sudden, we have about 20% of our userbase that we're ignoring.  And that tends to get things moving.  So that's a good motivation to get things started.  So let's say I've convinced you now and you were gonna do this.  You're determined to get accessibility into your project, and it's hard, and it's overwhelming, and you don't really know where to start.
    Our suggestion is to just start small.  For us, starting small meant doing that.  We installed pa11y into our project.  Pa11y is an open source tool that will check your markup against some regulations I'll show you in a little bit and it can detect some accessibility errors.  It doesn't detect everything but it's a good place to start.
    There are other open source tools that do the same thing but we've found pa11y to be a great thing for our project, and it has a great community of members and developers around it.  So this was the way that we started.  So the way pa11y works is it goes through the web content accessibility guidelines.  We won't go very deep into this today but you can go and check it out.  It's a list of criteria that your site should meet if it is to be accessible.  So it checks your markup against that, and then it gives you a report of what's broken.  And so we ran pa11y against ft.com, and we got a whole list of errors that was a lot more than two at the time.  And at that moment, we could just go and fix the errors, and run this every now and then manually, and then fix things that come up, but unless we had something that we could automate into our build process, this wasn't going to be very efficient.  So pa11y has sort of a wrapper that's called pa11y-ci, that just helps you to wrap pa11y into your continual process.  So this is what we did in FT.  This is an overall simplified version of our Node process.  So one app would be the opportunity page, or the article page, or sign-up pages.  And those apps live on GitHub.  Every time we push to a branch in GitHub, that kicks off a CircleCI build, and if it's a master branch, then it goes to Heroku and it's off to production.
    So pa11y kicks in here, in the continuous integration step.  So it would run for every push for every branch for your project and it would tell you what accessibility errors you have.  So to do that, we just need it to add one line to our existing build process which is .make pa11y.  And really, what that does is run pa11y-ci and it's highly customizable.  And so in our case, every branch generates a dynamic app with a dynamic name and so we run pa11y-ci against that.  And the interesting thing here is the threshold amount.  So, at the time, we've had dozens of apps making up ft.com and we had hundreds of errors.  So we couldn't just, one day, break every build, and hold production and say, hey, we need to fix all these errors.  So what that allows you to do is integrate pa11y to not break your builds, and so your builds will pass.  So you initially set that value to something very high.  You'll still have builds pass, and no one will have builds failing because of it.  But you'll have a report now of the accessibility errors that you have.  So once we did that, we went, app-by-app, cleaning up the errors, and then we would remove the threshold argument.  So for that moment, if a new branch included a new accessibility error, then that branch wouldn't pass.  And so that was sort of our ultimate goal.  So it would look like that.  So now you've reached kind of like a zero-error level, and now that has a new branch, it has a new error and you can't push that to production.  So that was a big achievement and we were getting to the point where all of our apps had this.  They all had zero errors and they were preventing making new errors into production.  And that was a big deal.  We felt like winners.
    No accessibility errors would ever make it to production.  But we realized that even though everyone was for accessibility, they all liked the idea of pa11y, they even liked having the idea of having pa11y break their build.  We didn't really do a great job of explaining what once you got that list of errors, or what that meant, or what you were supposed to do.  So that was a lesson learned.  So before you set a project on fire, train people.
    So a good place to start is this free Udacity course.  But this is a great tutorial that you can at your own pace and this is where we started our own training.
    So we've reached that level where you have zero errors in your app, or in all your apps.  You've removed that threshold argument and nothing's going to make it into production.  So now we've talked about errors that you can detect automatically in pa11y.  So that's about 20-35% of all the errors that you can and at least needs to be checked manually.  And so to do that is you can do some things.  One of them is getting an external audit where a third party with experience in accessibility checks your site and tells you -- gives you a report of what's broken, or certifies you that you have no errors and that you are accessible.  Something else that you can do is have customer research or do user testing and the third one is learning how to use assistive tech yourself so you can test your own site and spot some of these errors.  These are not mutually exclusive, and ideally you should be doing all of them.  So I'm going to go through each of these.
    In our case, the external audit was conducted by the Digital Accessibility Center, and I'm going to show you a little video of what they did.
    >> My name is Jebec Morgan, and I have cerebral palsy.
    >> Choose three.
    >> Click button.
    >> It controls the videos.
    >> My name is James Herkain, and I'm the color contrast and disability analyst at --
    >> On the home page, I encountered some text displayed on top of images.  Text displayed on top of images could be very difficult to read because of the varying contrast.
    >> I'm a web analyst at DOC.  I test zoom test with audible feedback.  And I'm going to scroll down below and just test this.
    >> My opinion, Morgan's companies, world, home.
    >> So there's an empty space here which would be an ideal place to put the subheading.
    >> My name is Charles Brew, and I'm at -- there's a moving image that extracts me from all the content.  Another issue that I've found on the home page is the carousel.  When navigating through it, I couldn't find the arrow to navigate to each page.  And once I found that, eventually finding the other previous button was difficult.
    >> Hello there, my name is Mike Jones and I'm completely blind and I'm an accessibility analyst at the Digital Accessibility Center.  On one of the articles that I've tested, there were several headings that announces read more.  And these also interrupt the article.  It's not clear what the user should be reading more about.  Actually these headings interrupt the main article that the user is reading.  So it would have been helpful to me, to ensure that the article read smoothly and continuously without interruptions.
    LAURA:  Yeah, so that's some of the work that they did.  This is only two minutes long but I was lucky enough to be able to spend a day -- a full day -- with them while they were doing the testing.  And if you have a chance to do this for the product that you're building, I highly recommend it because it will change your perspective on the work that you do forever.
    So after that, all of that testing, we got a report back with about -- it was, like, a 200-page report giving us all the errors that we had -- all the stuff that they had to detect manually.  So we went about fixing all of those.  It took us a couple of months.  And just very recently we got an accreditation saying that this website is accessible to this level of conformance and we were very glad to get it because it was very hard work and we were also very glad to be the first site in our industry to get it, but this is not a title that we want to hold alone.  So we encourage people from The Guardian, and The Post, and The Times, to get on this because this is one metric that we should all be trying to outdo each other on.
    So another problem is customer research.  But if you want your new features to make sense, they should probably be tested by actual users, or you could end up, you know, building something that looks good on paper but still get it very, very wrong.
    So lastly, here I wanted to talk a little bit about how we went about learning how to use assistive tech ourselves.  We had never done that before as a team.  So this is one thing that you can do for free and I would highly encourage it.  This is some of the tools we use.  You can get them all for free if you have a Mac.  We used VoiceOver for screenreader.  And we used the zoom capabilities of the Mac.  We tested a little bit on Windows as well because they have this high-contrast mode that just breaks everything.  So it's a lot worse than the Mac one, and by worse I mean a lot better because it finds more errors so if you have access to Windows, I would highly recommend looking at what you're looking at with that build on that mode.  So one thing that really helped us a lot was testing keyboard only.  So initially we would just go to ft.com and just test the site using the keyboard and then go about our lives and using our mouse, or our trackpad.  But what really made a difference was going keyboard only all the time.  So one thing you learn is you can use keyboard only on sites because they are good with keyboard accessibility.  But there are some sites that are impossible to use, and that becomes evident very quickly once you give up your house or your trackpad.  So to be able to make the transition easier from using a trackpad, to a keyboard is by using mouse keys.  So what that can do is disable your trackpad but it gives you the possibility to control your pointer with your number keys.  So you can use that in an emergency.  So if you have a site that has particularly bad accessibility, and you don't have a mouse, instead of using the mouse or a trackpad, you can -- so it's really annoying.  And really only want to use it when there's no other way.  So one thing we realize is convenient before you go keyboard only is printing out some of the shortcuts for your top apps.  This was my setup around November.
    But once you do this for a while, and you just memorize the shortcuts by using them, and all that paper goes away.
    Sometimes I don't have an external keyboard when I take my laptop home, for example.  So what I've done is I've made my trackpad really, really slow and I've removed all the goodies that Apple gave me so that when I do have to use it, it's uncomfortable so it reminds me to go back and use the keyboard.
    So that's lesson number three:  Throw away your mouse.  So going back to that list of things that you have to fix, you've learned to use all these tools.  You have your keyboard set up.  It's really tempting to just roll up your sleeves and try to fix everything yourself, but if you're building a large site, I'd recommend you don't do that.
    So it's -- wait, let's go back to Jim Carrey for a minute.  So one thing that we learned -- or that I learned -- it wasn't that quickly, it took a while, was that if you try and take on everything yourself, it's not efficient, it's not the right answer.  You end up burning out, errors keep coming back in faster than you can clean it up and you really do a disservice to your team by becoming a bottleneck.  So what you can do here is just get everyone involved.  A lot of people -- almost everyone -- everyone I know really wants to be a part of this, and wants to help, and they can only do that if you let them know that you need to help, that you're doing this, and how they can help.  Just give them tools to do this.
    So if you do have some time, just spend some of it training your team and getting them involved rather than just trying to fix everything yourself.  Also make it part of your recruitment process if you can.  Make it part of your job description, of your online tests, just put it out there.  So that was lesson number four for us:  Don't take it all out on yourself.
    Another good way to spread the word is making an event out of it.  We put together a road show in the office where we set some laptops in the middle of the office and we invited everyone to just try to complete a form using a screenreader.  And we offered an Amazon gift card as a prize.  So it was, like, a $20 Amazon gift card but people love Amazon so everyone stopped by.  So this was a form that you had to fill out.  So you can't really easy that much, and you're forced on using the screenreader to do it.  And a lot of people who stopped by, this was the first time of of them using a screenreader.  Some of them didn't even know what a screenreader was.  So this was a great way to expose a lot of people at the same time to accessibility.  So that's what the form is.  It's a very simple form with some annoying menu items if you don't skip them properly.  And it had some accessibility built in.  And the way that we did that was just very crudely blurred things, and disabling clicks, and discouraging people, saying not to cheat.  But this event that we held was probably a highlight in my 15 years of doing this.  Is this moment.  That's Patrick Hammond, you probably know him, a seasoned developer, and Patrick, I apologize, I'm going to use that for the rest of the year as I talk about this.  We got that type of reaction from a lot of people, and it was really great because we managed to create a space of collective empathy within these 20 minutes or so that people did this.  We had all these people just stepping into someone else's shoes for a minute or two at a time but everyone walked away with a new perspective on how people really use the product that they were building.
    So that was lesson number five:  Talk about it a lot.  Make sure you spread the word.  You never know who's listening and you're probably inspiring more people than you think you are.  Before we finish, I wanted to take you back to how they really all got started for us at the FT.  I was in book duty one day and I noticed this card on our JIRA board for bug duty.  Bug duty is the only place on our JIRA board.  It said integrate pa11y.  I didn't know what pa11y was.  And when I picked up that card expect and when saw the card, I noticed that it had been sitting around for a long time, I saw that Ben Fletcher created it.  And he's a developer who's deaf-blind and he just made us aware that that is something that we should be looking at.  So that's the next point, diversity will improve the team, it will improve you.  Ben's actions really snowballed into us building a better product.
    Our team learned about accessibility and got a new perspective, and just grew as a team.  And it led to me standing in front of you all here today.  So to recap, just the things that you learned, and probably some things that you can do tonight in half an hour.  Accessibility doesn't just happen.  You can do that in one minute in your project, if you make pa11y-ci as a part of your build process with a high threshold, and start getting reports of your accessibility errors.  Number two, train your people.  One good way is you could share that Udacity course with your colleagues, that's very quick.  Throw away your mouse but I do suggest printing out shortcuts beforehand.  Don't throw it to yourself.  Get people, get designers, QA, get product involved.  Talk about it.  Go on Twitter.  There's a lot of fantastic people out there with great insights on accessibility.  I'll share some links at the end of this talk.  So, yeah, just go over the Twitter feeds and see what they're talking about.  Retweet that you find interesting, something that inspires you.  That can be done very quickly.  And the last one, I unfortunately, don't have a magic silver bullet but you can do it in 30 seconds in your work.  But if you're involved in hiring, try to prioritize it, and if not, make it a thing that you talk about it, but it really benefits all those things that we just talked about.  A while back, it was probably normal to have this be the only entrance to a public building somewhere.  Now it would be unthinkable to have this.  But don't wait until it becomes unthinkable to have inaccessible websites.  The time to make your website accessible is today.  So just do it.  Thank you.
    >> Thank you so much.  That was an excellent talk on why accessibility is so important.  Also how blind we are to how other people might be using the web.  It's a super important space to work in and, yeah, thank you, again, to Laura.  We will be moving on to the next talk by Ruth.  And as y'all know there's also a second track.  We have talk by Jessica Tran, Hacking My Anxiety with Open Source Technology.  So if you're interested in that, that's going to be starting in five minutes, as well.  So who's interested in making an interactive visual cool stuff happen with the web?  People into this.  Yeah, absolutely!  We're doing a lot of visual stuff that people can access visually, and there's a lot of space in the web area to do that.  And as a warning, there are going to be flashing lights in this presentation, so anybody sensitive to that, just to be aware.  And there's also going to be some sound playing.  And also with the accessibility talk, I really like the term "spaces of empathy."  I think this is a really great term to talk about being empathic with people and creating a situation in which you can be empathic because it's easy to lose that.  Do we have any, like, audio-visual artists out there attending?
    The setup looks really exciting.  I can't wait to see it.  Also, I'll bring this up again, but in the Community Lounge, there's going to be talks during the break, and also some of our sponsors have workshops going on.  For example, I know the Mozilla table is going to have a rust workshop if anybody is into that, and later on, another one.  So make sure you check out those tables.  There's going to be stuff going on.  I'll bring it up again later when we go for lunch.  Yeah?