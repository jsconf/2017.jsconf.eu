Maureen McElaney - Go Offline First to Save The World 

>> Next up, we have Maureen. Maureen is a developer-advocate at IBM, and she's from Burlington, Vermont, and going to tell us about going offline to safe the world. Give it up for Maureen. [Applause].  
MAUREEN:  Thank you so much to JSConf for having me here. I'm so excited. This is my first time to Europe at all. I'm having a great time in Berlin. Thank to Ben Schwarz before my talk because you said a lot of things I didn't have time to say. Anyone who stayed for that talk and stayed for mine, you have good context what you're going to talk about today. This talk was inspired by Offline Camp. It happened last weekend. I got to attend that one but I attended two more before that, and in the offline first space, and I learned a lot about really amazing projects that are impacting people's lives, so that is what this talk is about. But first I wanted to give an overview of what offline first is. Really the main tenet of this is that Offline should not be treated as - this is a state that you should be planning for and expecting from your users, not an errant condition. We moved from designing applications from the desktop for mobile first because we wand to design for the most constrained environment. That is the thought behind offline first. We want to treat the offline state as the most constrained environment, start there, and move from that to progressively enhance the application as you get connectivity. The thing about bad offline states, some bad examples:  this is it what you see, you're on your app, you loose connectivity, a window pops up, blocks you don't know if what you were doing is lost, you don't know if you lost content. You have no idea if you can continue what you were doing in the middle of what you doing when you lost connectivity. This is a really bad experience for the user. When this site loses connectivity, it is clear you can see where you are on in the site, the site turns grey 3 - that's a pretty good experience. Items, and you can do things with your cart.  That's pretty cool.  Housing.com is a real estate site in India. When you lose connectivity with that, you - nick that has been cached anything that's been done before, if you navigate to your favourites, you didn't lose any of the listings that you favourited in that session. That's a really good experience. It greys out, obvious that you can't do a whole lot, but it lets you know you weren't in the middle of doing anything you were in the middle of doing. When I tell you more about how Off line First is changing lives and maybe even saving them. You, the JavaScript community, are doing amazing things in this space, so you should pat yourselves on the back because you're offline first and you don't know it. These projects are really cool. Why we would use technology for Los Angeles and London when we live in New Delhi?  Out of adversity can come innovation. Imagine that you live in a refugee camp. You have small children. You want to be able to teach your children and have full daily lives as you figure out what your next step is going to be. Brick allows to you continue I do run your classrooms, you have a curriculum that is managed remotely, and your teachers are allowed to make changes to this curriculum, changes are remotely brought down from educators around the world that contribute. And Brick makes this possible. It is a local microserver that stores the curriculum locally and as I said, it is remotely managed. It is dust proof, rugged, solar powered, and it is a built-in Wi-Fi hot spot, and I can sink your content using the cloud, and then enjoy your classes working seamlessly in low latency or no connectivity at all. In Haiti, there was a horrible earthquake in 2010. In 2014, a lot of country still didn't have electricity. This is a huge problem, obviously, but the country relied heavily on agriculture, and the farmers were not able to make the same profits off their crops because they couldn't get the electricity to process the vegetables and get that ready for shipment to leave. So they lost millions of dollars and their economy was devastated. But not only that, just normal families couldn't access electricity to take care of their children. So, with access to the right technology, they could rebuild those microgrids within their communities and get electric goods back running. Sparkmetre did this, found in 2013, and they offer low-cost metering solutions from rural microgrids out in small villages to existing urban central grid utilities. Now they support grids in 15 countries adding more every day. So they've a JavaScript front-end and they use symmetric DS to handle syncing when the app is online, and then MQ and - for asynchronous gain, for energy metering, media processing, and payments. This brings me to one of the first challenges. I'm going to talk about three in these talks. Offline First is a developing context and there are a lot of problems that need to be solved. The first one I want to talk about is syncing. Sink conflicts are hard. When we think about Brick's syncing capabilities or Supporting Metre selling bills out to your families in Ural parse of Haiti, you want to make sure you've got it right not overwriting or processing wrong data for people. There are a few days that you can take care of this. One solution is a JavaScript database with its ability to sync with anything that - it allows to you read and write Day directly on to the device and sync this data when you're back in connectivity. This includes IBM cloud amp that is based on cache.db and another thing you can utilise for syncing. Back to Kenya. This picture is a bunch of doctors who are loading patient records on to a bus to drive out to a village. Prepare the far away from the honestly. This is how they were handling all their patient records. Hundreds of pounds of paper that is very vulnerable to the elements, and this is not a sustainable way to make sure you're saving lives of people that really, really need your help. Before the honestly run came along, they were relying on this process. So this application came along. The Honestly Run did a lot of research and found out that 20 per cent of health care professionals' time is spent just on administrative tasks, and a lot of that time is spent by the software they were using. They were taking these papers out to a village, making these changes to the patient records and history, and then they had to go back and manually international of the data into the software, and their software was crappy to deal with. Honestly Run let them take it out to a patient on a tablet or mobile phone, meaning they could make changes offline or in the village, and the changes would sync when they got back to Wi-Fi available when they were back at the honestly. Couch TV on the front end and Node and couch TV on the backend £works when there is no internet and syncs when there is. Now, in the Yuko of Alaska, health care workers wanted a better way to be able to take care of pregnant mothers and their newborn baby, because these people were rural poor, lived far from the honestly, and depending on the time of year, it might have been impossible to get there if an emergency happened. And Yukon doesn't have great mobile coverage, and because these people had to think about keeping their costs low, making sure that an application was lightweight and didn't drive up a lot of mobile data usage was really important. So Yukon Baby is built which gets its information out to new mothers, built with angular. Just and Node it syncs date when a connection is stability. It only updates when there is new information to be had, so it keeps mobile bills low too for these people, which is awesome. This brings me to the next real problem with Offline First which still needs some attention. When an application caches data locally to a device, you have to think about the privacy concerns around the data that you are saving, so you need to think about how this is handled and whether when you're thinking about honestly information, medical history, all that kind of stuff, someone who is pregnant, you want to make sure that that information is not being shared when it needs to be private. When you're thinking about security with offline applications, you have to think about data validation, offering the ability to lock out so, if you're sharing a device - log out that you can - and for apps that require really high security, you might want to consider end-to-end encryption for your app. So writing secure apps is hard and even harder in the browser. Calvin is here today who wrote a cool post about security from a session session that we had. I encourage you out to check that Medium account and read that because it has a lot of good information. You might be thinking, "What about me?  I'm talking about people who live in rural areas or developing countries, you might not be designing apps for these kind of users. What kind of things are more relatable to what I deal with on a daily basis?  I'm from the US, and I am concerned about my current president and the administration there, and that project came along and they wrote a really simple application that makes it easier for governments and researchers to share their data sets with software helps to do really using things, so the grant funded, and it's decentralised, a sharing version tool for sinking these big data sets, and it can be used to version the data locally and share and sync it over the internet. And it's open-source, so you can check it out and see what they're doing. It is built with no JS. By taking an online first approach to the digital preservation, this allows users to share the data sets in a lightweight way, and, before this, they were doing it manually. Spending a lot of money on Dropbox, or doing really manual here's a giant flash line of information, please don't drop it in water kind of thing. That makes it really simple for these people to share data across the globe. That's really pivotal. Like I said in the US, we had an issue where, in January, the whitehouse.gov deleted the data sets that were available. It was Tweeted, "I already grabbed it, so you can come and get it," which was awesome because thought it was lost for every. The next thing under threat is the environmental protection agency. We want to make sure this information is proved for future generations to prove these, are true because it is important. He can go to the website and see a lot of the data sets they have available and accessible for you to build anything you want, build all kinds of applications using it. So how do you convince your boss and your company, and your team, to invest in the extra time to make the app offline first?  There are fining reasons, and Ben pointed out a lot of them in regard to performance. So, when we look at LT capacity, the capacity has remained in the same in the US in the last 12 months. The amount of users and bandwidth per user has increased things dramatically because of things like video streaming, entertainment, video conferencing, that sort of stuff. So this has all resulted in the past we are from to year, a 50 per cent slowing of the speeds overall, and the US is 20 per cent slower than Europe, actually. This is something if your users are predominantly in the US or Europe, you have to think about how the performance of your app is. Not only that, but 60 per cent of the world is on a 2G network and in the developing world, two thirds are on a 2G network. If you're building your application to work in a best-case scenario, these people won't be able to access this. A 4G user is also not a 4G user most of the time. People live in variable connectivity. They take the subway to work, take buses, they walk between skyscrapers and loose connectivity. You don't want them to access your app and 11 loose them because you use 40 per cent of your users if it takes more tan three seconds for your app to load. Aside from that, radio cell towers preserve birdie between transitioning between high and low states. If they might access your app, they might be accessing it during the low period of power-gridding and you lose them because the app took too long to load. So, by designing for low latency first, you're making substantial improvements in performance. It is really imperative that sue design your app for - that you design your app for performance, and getting a baseline in spite of low connectivity is really, really important. Let's go back to Flip cart. This is an example I mentioned earlier. They did a few things really to increase the speed of their collection. They added a splash screen, they stitched to using service worker so they could handle negotiations. They sort of added smoother animations to their site.  Because of that, they had three times less data usage overall, they had a 40 per cent higher engagement rate, increased their conversion by 70 per cent, and all in all, users spent more time on their platform. So this brings me to one more challenge I want to talk about. In regard to Offline First, design patterns are still being invented there isn't one way that the user can see the offline state. There's no standard for this. This is still something that needs to be developed by the community. Steve Travathon, one of the organisers of offline camp and is the founder of Makingmodel Co. He wrote a really amazing post for design patterns for offline states with three tenets that he talked about:  freshness, reach, and assurance. When we talk about freshness, we're thinking about how fresh is the data?  How are you communicating the freshness of data to your users?  You could communicate this in a lot of different way, and you can say here's a timestamp, the last time it was viewed on this day, there's an update available, so refresh your app, that kind of. When we are looking at Reach, we want to know is it the data reachable or not?  That should be clearly communicated. So, is it clear that I can perform an action right now?  Or is it really obvious that I need to wait until I'm in connectivity to be able to do this, so checking out your cart of items you want to buy, that kind of thing. An assurance when we're talking about how much is my responsibility as a user to save the data that I have?  Is to, when I lose - so, when I lose connectivity do I have the experience to stave the writing, and we've experienced where we write a long paragraph, click send, and we have to start over. We don't want to do that to our users. You want to think how are we going to communicate this in the browser. Is there a save button?  Still still saving. Is it in the middle of syncing?  Should I wait?  It's going to happen at some point. So this is really still a problem that we need your help to solve and this is what the JavaScript community, this is, there are many opportunities for you still to contribute. This this is where you can connect with the community, there's a Slack organisation which is active and you can talk to all of the people who are involved with all the projects that I discussed, and offline camp is a real cool, a fun un-conference way to contribute to the community, talk about the things that you're doing because the community wants to hear what you're doing and contributing already and how these problems might be solved out there. So, yes, we really want to hear what you're doing. Please connect with us. Thanks to Patricia García. If you attended JSConf last we are, you may have heard her talk, "Good tech for hard places" another offline first project that you should look into. I've also included a plethora of really nifty tools that you can do if you want to research Offline First, including a lot of further reading for the articles that I read in preparation for this talk, and you can also access them on my slides. They should be Tweeted right now. You can get them through this link here. Thank you so much. That's all I have today. [Applause].  
>> Thank you, that was awesome. What an awesome book of talks. I hope that everyone here in this room who was watching carefully are really passionate about working on some performance bottlenecks and improvements after they leave JSConf. There are two things that you have to know about the upcoming coffee break:  first, obviously, there is a coffee break. Secondly, there is a TC39 panel happening after the break, and, for those of you like myself who don't have any idea what that means, if you are curious how JavaScript is actually maintained as a language, what gets standardised, and how all of those decisions are being made, and, if you want to contribute or have influence on that, you should really be in this room at 4.30. Fake news, second, third point, go to the community area, find folks from Live.js who are having a presentation -- { live : JS }. If you haven't teen it, go there. Go and see it for the second time!  See you after the break. 
[Break]. 